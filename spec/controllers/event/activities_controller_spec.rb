require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Event::ActivitiesController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Event::Activity. As you add validations to Event::Activity, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryBot.attributes_for(:event_activity).merge!(event_day_id: event.days.last.id)
  }

  let(:invalid_attributes) {
    FactoryBot.attributes_for(:event_activity, :invalid)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Event::ActivitiesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:event) { create(:event) }

  describe "GET #index" do
    it "returns a success response" do
      get :index, params: { event_id: event.to_param }, session: valid_session
      expect(assigns(:event_activities)).to eq []
      expect(response.status).to eq 200
    end

    it "assigns only activities of the event" do
      other_event = create(:event)
      activity1 = Event::Activity.create! valid_attributes
      activity2 = Event::Activity.create! valid_attributes.merge!(event_day_id: other_event.days.last.id)
      get :index, params: { event_id: event.to_param }, session: valid_session
      expect(assigns(:event_activities)).to eq [activity1]
    end

    context "when event does not exist" do
      it "renders 404" do
        get :index, params: { event_id: 0 }, session: valid_session
        expect(response.status).to eq 404
        expect(response).to render_template(file: "#{Rails.root}/public/404.html")
      end
    end
  end

  describe "GET #show" do
    context "when event has the activity on its days" do
      it "returns a success response" do
        activity = Event::Activity.create! valid_attributes
        get :show, params: { event_id: event.to_param, id: activity.to_param }, session: valid_session
        expect(response.status).to eq 200
      end
    end

    context "when event hasn't the activity on its days" do
      it "renders 404" do
        other_event = create(:event)
        activity = Event::Activity.create! valid_attributes.merge!(event_day_id: other_event.days.last.id)
        get :show, params: { event_id: event.to_param, id: activity.to_param }, session: valid_session
        expect(response.status).to eq 404
        expect(response).to render_template(file: "#{Rails.root}/public/404.html")
      end
    end
  end

  describe "GET #new" do
    context "when user is not logged in" do
      it "redirects to new user session path" do
        get :new, params: { event_id: event.to_param }, session: valid_session
        expect(response).to redirect_to new_user_session_path
      end
    end

    context "when user is logged in" do
      login_user

      context "when user is not event owner" do
        it "returns to root_path with flash message" do
          get :new, params: { event_id: event.to_param }, session: valid_session
          expect(response).to redirect_to root_path
          expect(flash[:alert]).to include(I18n.t("unauthorized"))
        end
      end

      context "when user is event owner" do
        let(:event) { create(:event, owner: @user) }

        it "returns a success response" do
          get :new, params: { event_id: event.to_param }, session: valid_session
          expect(response.status).to eq 200
        end
      end
    end

  end

  describe "GET #edit" do
    let(:activity) { Event::Activity.create! valid_attributes }

    context "when user is not logged in" do
      it "redirects to new user session path" do
        get :edit, params: { event_id: event.to_param, id: activity.to_param }, session: valid_session
        expect(response).to redirect_to new_user_session_path
      end
    end

    context "when user is logged in" do
      login_user

      context "when user is not event owner" do
        it "redirects to root path with flash message" do
          get :edit, params: { event_id: event.to_param, id: activity.to_param }, session: valid_session
          expect(response).to redirect_to root_path
          expect(flash[:alert]).to include(I18n.t("unauthorized"))
        end
      end

      context "when user is event owner" do
        let(:event) { create(:event, owner: @user) }

        it "returns a success response" do
          get :edit, params: { event_id: event.to_param, id: activity.to_param }, session: valid_session
          expect(response.status).to eq 200
        end
      end
    end
  end

  describe "POST #create" do
    context "when user is not logged in" do
      it "redirects to new user session path" do
        expect {
          post :create, params: { event_id: event.to_param, event_activity: valid_attributes }, session: valid_session
        }.to change(Event::Activity, :count).by(0)
        expect(response).to redirect_to new_user_session_path
      end
    end

    context "when user is logged in" do
      login_user

      context "when user is not event owner" do
        it "returns to root_path with flash message" do
          expect {
            post :create, params: { event_id: event.to_param, event_activity: valid_attributes }, session: valid_session
          }.to change(Event::Activity, :count).by(0)
          expect(response).to redirect_to root_path
          expect(flash[:alert]).to include(I18n.t("unauthorized"))
        end
      end

      context "When user is event owner" do
        let(:event) { create(:event, owner: @user) }

        context "with valid params" do
          it "creates a new Event::Activity" do
            expect {
              post :create, params: { event_id: event.to_param, event_activity: valid_attributes }, session: valid_session
            }.to change(Event::Activity, :count).by(1)
          end

          it "redirects to the created event_activity" do
            post :create, params: { event_id: event.to_param, event_activity: valid_attributes }, session: valid_session
            expect(response).to redirect_to event_activity_path(event_id: event.to_param, id: Event::Activity.last.to_param)
          end
        end

        context "with invalid params" do
          it "returns a success response (i.e. to display the 'new' template)" do
            post :create, params: { event_id: event.to_param, event_activity: invalid_attributes }, session: valid_session
            expect(response.status).to eq 200
          end
        end
      end
    end
  end

  describe "PUT #update" do
    let(:activity) { Event::Activity.create! valid_attributes }
    let(:new_attributes) { FactoryBot.attributes_for(:event_activity) }

    context "when user is not logged in" do
      it "redirects to new user session path" do
        put :update, params: { event_id: event.to_param, id: activity.to_param, event_activity: new_attributes }, session: valid_session
        expect(response).to redirect_to new_user_session_path
      end
    end

    context "when user is logged in" do
      login_user

      context "when user is not event owner" do
        it "redirects to root path with flash message" do
          put :update, params: { event_id: event.to_param, id: activity.to_param, event_activity: new_attributes }, session: valid_session
          expect(response).to redirect_to root_path
          expect(flash[:alert]).to include(I18n.t("unauthorized"))
        end
      end

      context "when user is event owner" do
        let!(:event) { create(:event, owner: @user) }

        context "with valid params" do
          it "updates the requested event_activity" do
            put :update, params: { event_id: event.to_param, id: activity.to_param, event_activity: new_attributes }, session: valid_session
            activity.reload
            expect(activity.title).not_to eq valid_attributes[:title]
            expect(activity.title).to eq new_attributes[:title]
          end

          it "redirects to the event_activity" do
            activity = Event::Activity.create! valid_attributes
            put :update, params: { event_id: event.to_param, id: activity.to_param, event_activity: valid_attributes }, session: valid_session
            expect(response).to redirect_to(event_activity_path(event_id: event.to_param, id: activity.to_param))
          end
        end

        context "with invalid params" do
          it "returns a success response (i.e. to display the 'edit' template)" do
            activity = Event::Activity.create! valid_attributes
            put :update, params: { event_id: event.to_param, id: activity.to_param, event_activity: invalid_attributes }, session: valid_session
            expect(response.status).to eq 200
          end
        end
      end
    end

  end

  describe "DELETE #destroy" do
    let(:activity) { Event::Activity.create! valid_attributes.merge!(event_day_id: event.days.last.id) }
    let(:new_attributes) { FactoryBot.attributes_for(:event_activity) }

    context "when user is not logged in" do
      it "redirects to new user session path" do
        event
        activity
        expect {
          delete :destroy, params: { event_id: event.to_param, id: activity.to_param }, session: valid_session
        }.to change(Event::Activity, :count).by(0)
        expect(response).to redirect_to new_user_session_path
      end
    end

    context "when user is logged in" do
      login_user

      context "when user is not event owner" do
        it "redirects to root path with flash message" do
          event
          activity
          expect {
            delete :destroy, params: { event_id: event.to_param, id: activity.to_param }, session: valid_session
          }.to change(Event::Activity, :count).by(0)
          expect(response).to redirect_to root_path
          expect(flash[:alert]).to include(I18n.t("unauthorized"))
        end
      end

      context "when user is event owner" do
        let(:event) { create(:event, owner: @user) }

        it "destroys the requested event_activity" do
          event
          activity
          expect {
            delete :destroy, params: { event_id: event.to_param, id: activity.to_param }, session: valid_session
          }.to change(Event::Activity, :count).by(-1)
        end

        it "redirects to the event_activities list" do
          delete :destroy, params: { event_id: event.to_param, id: activity.to_param }, session: valid_session
          expect(response).to redirect_to(event_activities_url)
        end
      end
    end
  end

end
